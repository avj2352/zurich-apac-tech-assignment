import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getUserInfo } from '../../async/AsyncCalls';

const initialState = {
  status: 'idle',  
  data: [{
    id: 0,
    email: '',
    first_name: '',
    last_name: '',
    avatar: ''
  }]
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchUserInfoAsync = createAsyncThunk(
  'info/getUserInfo',
  async () => {
    const response = await getUserInfo();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const userInfoSlice = createSlice({
  name: 'info',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchUserInfoAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchUserInfoAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data = action.payload;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUserInfo = (state) => state.info.data;

export default userInfoSlice.reducer;